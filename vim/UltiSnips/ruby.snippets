#
# for common ruby
#
snippet class "class <class_name> def initialize ... end end"
class ${1:class_name}
	def initialize(${2:*args})
		$0
	end
end
endsnippet

snippet def
def ${1:method_name}
	${0}
end
endsnippet

snippet begin
begin
	${0}
rescue ${1:Exception} => ${2:e}
end
endsnippet

snippet case
case ${1:object}
when ${2:condition}
	${0}
end
endsnippet

snippet if
if ${1:condition}
	${0:${VISUAL}}
end
endsnippet

snippet ife
if ${1:condition}
	${2:${VISUAL}}
else
	${0}
end
endsnippet

snippet unless
unless ${1:condition}
	${0:${VISUAL}}
end
endsnippet

snippet bp
binding.pry
endsnippet

#
# for rspec
#
snippet describe
describe '${1:message}' do
	${0}
end
endsnippet

snippet context
context '${1:message}' do
	${0}
end
endsnippet

snippet it
it '${1:message}' { ${0} }
endsnippet

snippet itdo
it '${1:message}' do
	${0}
end
endsnippet

snippet let
let(:${1:object}) { ${0} }
endsnippet

snippet letdo
let(:${1:object}) do
	${0}
end
endsnippet

snippet let!
let!(:${1:object}) { ${0} }
endsnippet

snippet let!do
let!(:${1:object}) do
	${0}
end
endsnippet

snippet subject
subject { ${0} }
endsnippet

snippet before
before { ${0} }
endsnippet

snippet beforedo
before do
	${0}
end
endsnippet

snippet expect
expect(${0})
endsnippet

snippet fac
FactoryBot.create(:${0})
endsnippet
